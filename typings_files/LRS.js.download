/**
 * 工具类
 * 本类主要封装一些常用的功能函数，如：字符串的查找、截取，数组的合并与拆分
 * 为使JavaScript与PHP更好的衔接，结合PHP语法的特点，做相应的处理，如：
 * - 由于JavaScript数组不支持关联索引，因此本类一般返回对象，用对象的方法实现关联索引。实际上，在JavaScript中数组是一种特殊的对象。
 * 
 * @author LRS 2015-6-24
 */
var LRS = {
	string : {
		/**
		 * 字符串分割为对象
		 * @param string delimiter 分隔符
		 * @param string str 被分割的字符串
		 * @return object
		 */
		explode : function(delimiter, str, limit) {
			var arr = str.split(delimiter);
			return LRS.array.object(arr);
		},
		/**
		 * 删除字符串末端的空白字符（或者其他字符）
		 * " " (ASCII 32 (0x20)), an ordinary space.
		 * "\t" (ASCII 9 (0x09)), a tab.
		 * "\n" (ASCII 10 (0x0A)), a new line (line feed).
		 * "\r" (ASCII 13 (0x0D)), a carriage return.
		 * "\0" (ASCII 0 (0x00)), the NULL-byte.
		 * "\x0B" (ASCII 11 (0x0B)), a vertical tab.
		 * @param string str 要被删除的字符串
		 */
		rtrim : function(str, characterMask) {
			var masks = {
				0:"",1:"\t",2:"\n",3:"\r",4:"\0",5:"\x0B"
			};
			characterMask = LRS.args.def(arguments[1], '');
			var masks = LRS.object.merge(masks, LRS.string.split(characterMask));
			while(LRS.object.has(str.slice(-1), masks) && str !== '') {
				str = str.slice(0, -1);
			}
			return str;
		},
		/**
		 * 切割字符
		 * @param string str
		 * @param integer splitLength 切割长度
		 * @return object
		 */
		split : function(str, splitLength) {
			var obj = {};
			splitLength = LRS.args.def(arguments[1], 1);
			var times = parseInt(str.length / splitLength);
			if(str.length % splitLength !== 0) {
				times++;
			}
			for(var i = 0; i < times; i++) {
				if(i < times - 1) {
					obj[i] = str.substr(i*splitLength, splitLength);
				} else {
					obj[i] = str.substring(i*splitLength)
				}
			}
			return obj;
		},
		/**
		 * 返回字符串中是否包含needle字符
		 * @param string str
		 * @param string needle
		 * @return boolean
		 */
		has : function(str, needle) {
			return str.indexOf(needle) !== -1  ? true : false;
		},
		/**
		 * 计算str中needle出现的次数
		 * 注意：
		 * - 刚方法支持正则，区分大小写可以通过正则设置
		 * @param string str
		 * @param string needle
		 * @return integer
		 */
		count : function(str, needle) {
			return str.split(needle).length - 1;
		},
		/**
		 * 返回字符串左边的部分
		 * 注意：
		 * - 如果没有找到返回false
		 * - 如果匹配到了最前，则返回空字符串
		 * @param string str
		 * @param string $needle
		 * @return string|false
		 */
		left : function(str, needle) {
			var pos = str.indexOf(needle);
			if(pos === -1) {
				return false;
			}
			return str.substring(0, pos);
		},
		/**
		 * 返回字符串首次出现某字符的右边部分，不包括字符串本身
		 * 注意：
		 * - 如果没有找到返回false
		 * - 如果匹配到了最后,则返回空字符串
		 * @param string str
		 * @param string needle
		 * @return string|false
		 */
		right : function(str, needle) {
			var pos = str.indexOf(needle);
			if(pos === -1) {
				return false;
			}
			return str.substring(pos + needle.length);
		},
		/**
		 * 
		 */
		random : function(len) {
			var len = len || 6;
			var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
			var maxPos = chars.length;
			var nonceStr = '';
			for (i = 0; i < len; i++) {
				nonceStr += chars.charAt(Math.floor(Math.random() * maxPos));
			}
			return nonceStr;
		},
		/**
		 * 不足补零
		 */
		pad:function(num, n) {
            return (Array(n).join(0) + num).slice(-n);
        },
		/**
		 * 邮箱验证
		 */
		isEmail:function(str) {
			return /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(str);
		},
		/**
		 * 网址验证
		 */
		isUrl:function(str) {
			return /^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(str);
		},
		/**
		 * 是否是日期
		 */
		isDate:function(str) {
			return !/Invalid|NaN/.test( new Date(str).toString() )
		},
		/**
		 * 是否是ISO日期
		 */
		isDateISO:function(str) {
			return /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(str);
		},
		/**
		 * 是否是数字，包括小数、负数
		 */
		isNumber:function(str) {
			return /^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(str);
		},
		/**
		 * 是否是整数
		 */
		isInt:function(str) {
			return /^\d+$/.test(str);
		},
		/**
		 * 是否是手机
		 */
		isMobile:function(str) {
			return /^(13[0-9]|14[0-9]|15[0-9]|18[0-9])\d{8}$/i.test(str);
		},
		/**
		 * 是否是身份证
		 */
		isIdentityCard:function(str) {
			return /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/i.test(str);
		},
	},
	array : {
		/**
		 * 数组转化为对象
		 * @param array arr 数组，如:[1, 2, 3]
		 * @return object
		 */
		object : function(arr) {
			var obj = {};
			for(x in arr) {
				obj[x] = arr[x];
			}
			return obj;
		},
		/**
		 * 判断是否为数组
		 * @param mixed arr
		 * @return boolean
		 */
		is : function(arr) {
			if(arr === null || arr == undefined) {
				return false;
			}
			return arr.constructor.toString().indexOf("Array") > -1;
		},
		/**
		 * 判断是否包含某个元素
		 * @param boolean strict 是否为严格模式，默认false
		 */
		has : function(arr, value, strict) {
			if(strict == undefined) {
				strict = false;
			}
			for(x in arr) {
				if(strict) {
					if(arr[x] === value) {
						return true;
					}
				} else {
					if(arr[x] == value) {
						return true;
					}
				}
				
			}
			return false;
		},
		/**
		 * 获取随机元素
		 */
		random : function(arr) {
			return arr[Math.floor(Math.random()*arr.length)];
		},
	},
	object : {
		/**
		 * 判断是否为对象
		 * @param mixed obj
		 * @return boolean
		 */
		is : function(obj) {
			return obj.constructor.toString().indexOf("Object") > -1;
		},
		/**
		 * 获取对象的长度
		 */
		length : function(obj) {
			var len = 0;
			for(x in obj) {
				len++;
			}
			return len;
		},
		/**
		 * 合并对象，类似PHP array_merge,数字索引不覆盖,关联索引后面覆盖前面
		 * 备注：
		 * - 如果参数小于两个，则直接返回空对象
		 * - 索引键会被重新排序
		 * @return object
		 */
		merge : function() {
			var obj = {};
			if(arguments.length > 1) {
				var current = 0;
				for(var i = 0; i < arguments.length; i++) {
					for(x in arguments[i]) {
						if(LRS.number.isInt(x)) {
							obj[current] = arguments[i][x];
							current++;
						} else {
							obj[x] = arguments[i][x];
						}
					}
				}
			}
			return obj;
		},
		/**
		 * 返回对象所有的键
		 * @param object obj
		 * @return object
		 */
		keys : function(obj) {
			var keys = {};
			var i = 0;
			for(x in obj) {
				keys[i] = x;
				i++;
			}
			return keys;
		},
		/**
		 * 只返回对象的键值是数字的键
		 * 备注:
		 * - 由于数字索引只能是整形,因此需用isInt判断,避免`10.1`的情况
		 * @param object obj
		 * @return object
		 */
		numKeys : function(obj) {
			var numKeys = {};
			var i = 0;
			for(x in obj) {
				if(LRS.number.isInt(x)) {
					numKeys[i] = x;
					i++;
				}
			}
			return numKeys;
		},
		/**
		 * 获取对象中最大的值
		 * @param object obj
		 * @param string type 比较类型,如:当数字时 20000 > 'dd', 字符串时 '20000' < 'dd', 因此需要判断类型
		 */
		max : function(obj, type) {
			var max = -Infinity;
			if(type === undefined) {
				type = 'number';
			};
			for(x in obj) {
				var v = type == 'number' ? Number(obj[x]) : obj[x];
				if(v > max) {
					max = v;
				}
			}
			return max;
		},
		/**
		 * 获取对象中最大的数字键值
		 * @param object obj
		 * @param type
		 */
		maxNumKey : function(obj, type) {
			var numKeys = LRS.object.numKeys(obj);
			return LRS.object.max(numKeys, type);
		},
		/**
		 * 检查对象中是否包含某个值，类似in_array,但in在JavaScript是关键字
		 * @param mixed needle 待搜索的值
		 * @param object haystack 对象
		 * @param boolean strict 严格匹配
		 * @return boolean
		 */
		has : function(needle , haystack, strict) {
			strict = LRS.args.def(arguments[2], false);
			for(x in haystack) {
				if(strict) {
					if(haystack[x] === needle) {
						return true;
					}
				} else {
					if(haystack[x] == needle) {
						return true;
					}
				}
			}
			return false;
		},
		/**
		 * 弹出显示对象
		 */
		alert : function(obj) {
			for(x in obj) {
				alert(x + ':' + obj[x]);
			}
		},
		/**
		 * 输出对象的字符串样式，类是PHP ArrayUtil::export()
		 * 例如： var obj = {name: 'LRS'} 返回字符串 '{"name":"LRS"}'
		 */
		stringify : function(obj) {
			return JSON.stringify(obj);
		},
		/**
		 * 组装查询数组
		 * 借组jquery方法
		 */
		httpBuildQuery : function(obj) {
			return $.param(obj);;
		}
	},
	number : {
		/**
		 * 判断是否是数字
		 * 备注:
		 * - 特例 `[10]`这是一个数组,但isNaN([10]),返回的是这是一个数字,这个结论不是我们希望的.因此要做类型判断
		 * @param mixed num
		 * @return boolean
		 */
		is : function(num) {
			if(typeof num === 'object') {
				return false;
			}
			return !isNaN(num);
		},
		/**
		 * 判断是否是数字
		 * 备注:
		 * - 特例 `[10]`这是一个数组,但isNaN([10]),返回的是这是一个数字,这个结论不是我们希望的.因此要做类型判断
		 * - 当num中,包含`.`时,用number.is()方法出现差错,且索引数组指的是整型,因此需要isInt做判断
		 * @param mixed num
		 * @return boolean
		 */
		isInt : function(num) {
			var type = typeof num;
			if(type === 'object') {
				return false;
			}
			if(type === 'number' || type === 'string' ) {
				if(String(num).indexOf('.') > -1) {
					return false;
				}
			}
			return !isNaN(num);
		}
	},
	/**
	 * 格式化
	 */
	format : {
		/**
		 * 钱，单位分
		 * @param integer money 单位元
		 * @param integer 小数长度，默认为2
		 * @param string d 逗号符，默认.
		 * @param string t 千分位，分割符
		 */
		money : function(money, c, d, t) {
		    c = isNaN(c = Math.abs(c)) ? 2 : c, 
		    d = d == undefined ? "." : d, 
		    t = t == undefined ? "," : t, 
		    s = money < 0 ? "-" : "", 
		    i = String(parseInt(money = Math.abs(Number(money) || 0).toFixed(c))), 
		    j = (j = i.length) > 3 ? j % 3 : 0;
		    return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(money - i).toFixed(c).slice(2) : "");
		},
	},
	/**
	 * 整数
	 */
	integer : {
		rand : function(min, max) {
			return Math.floor(Math.random() * (max - min + 1)) + min;
		}
	},
	/**
	 * 函数参数
	 */
	args : {
		/**
		 * 如果arg为undefined，则返回默认值
		 * @param mixed arg 参数
		 * @param mixed def 默认值
		 */
		def:function(arg, def) {
			return arg === undefined ? def : arg;
		}
	},
	/**
	 * 文件
	 */
	file : {
		/**
		 * 判断是否是图片
		 * 注意：
		 * - 有且仅有一个.
		 * - 后缀为jpg,jpeg,gif,png之一
		 * - .前面必须有字符，不能类似  `.jpg`
		 * @param string file 文件，包括路径和文件名
		 * @return boolean
		 */
		isImage:function(file) {
			if(!LRS.string.has(file, '.')) {
				return false;
			}
			return /.+\.(jpg|jpeg|gif|png)$/i.test(file);
		},
		
		/**
		 * 获取文件后缀名
		 * 注意：
		 * - 如果不是文件，则返回false
		 * @param string $file 文件，包括路径和文件名
		 * @return string|false
		 */
		suffix:function($file) {
			if(LRS.string.count($file, '.') != 1) {
				return false;
			}
			return LRS.string.right($file, '.');
		}
		
	},
	/**
	 * 
	 */
	encode : {
		base64:function(str) {
			var base64EncodeChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
			var base64DecodeChars = new Array(-1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56,
					57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3,
					4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
					20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28,
					29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
					44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);
			var out, i, len;
			var c1, c2, c3;
			len = str.length;
			i = 0;
			out = "";
			while(i < len) {
				c1 = str.charCodeAt(i++) & 0xff;
				if(i == len) {
					out += base64EncodeChars.charAt(c1 >> 2);
					out += base64EncodeChars.charAt((c1 & 0x3) << 4);
					out += "==";
					break;
				}
				c2 = str.charCodeAt(i++);
				if(i == len) {
					out += base64EncodeChars.charAt(c1 >> 2);
					out += base64EncodeChars.charAt(((c1 & 0x3) << 4)
							| ((c2 & 0xF0) >> 4));
					out += base64EncodeChars.charAt((c2 & 0xF) << 2);
					out += "=";
					break;
				}
				c3 = str.charCodeAt(i++);
				out += base64EncodeChars.charAt(c1 >> 2);
				out += base64EncodeChars.charAt(((c1 & 0x3) << 4)
						| ((c2 & 0xF0) >> 4));
				out += base64EncodeChars.charAt(((c2 & 0xF) << 2)
						| ((c3 & 0xC0) >> 6));
				out += base64EncodeChars.charAt(c3 & 0x3F);
			}
			return out;
		},
		
	},
	/**
	 * 
	 */
	decode : {
		base64 : function base64decode(str) {
			var base64EncodeChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
			var base64DecodeChars = new Array(-1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56,
					57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3,
					4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
					20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28,
					29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
					44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);
			var c1, c2, c3, c4;
			var i, len, out;
			len = str.length;
			i = 0;
			out = "";
			while(i < len) {

				do {
					c1 = base64DecodeChars[str.charCodeAt(i++) & 0xff];
				} while(i < len && c1 == -1);
				if(c1 == -1)
					break;

				do {
					c2 = base64DecodeChars[str.charCodeAt(i++) & 0xff];
				} while(i < len && c2 == -1);
				if(c2 == -1)
					break;
				out += String.fromCharCode((c1 << 2) | ((c2 & 0x30) >> 4));

				do {
					c3 = str.charCodeAt(i++) & 0xff;
					if(c3 == 61)
						return out;
					c3 = base64DecodeChars[c3];
				} while(i < len && c3 == -1);
				if(c3 == -1)
					break;
				out += String.fromCharCode(((c2 & 0XF) << 4)
						| ((c3 & 0x3C) >> 2));

				do {
					c4 = str.charCodeAt(i++) & 0xff;
					if(c4 == 61)
						return out;
					c4 = base64DecodeChars[c4];
				} while(i < len && c4 == -1);
				if(c4 == -1)
					break;
				out += String.fromCharCode(((c3 & 0x03) << 6) | c4);
			}
			return out;
		}
	}
}